var _wintvelt$elm_print_any$PrintAny$splitLine = function (line) {
	var newLine = A2(_elm_lang$core$String$dropLeft, 5, line);
	var indent = A2(
		_elm_lang$core$Result$withDefault,
		0,
		_elm_lang$core$String$toInt(
			A2(_elm_lang$core$String$left, 5, line)));
	return {ctor: '_Tuple2', _0: indent, _1: newLine};
};
var _wintvelt$elm_print_any$PrintAny$pad = function (indent) {
	return A3(
		_elm_lang$core$String$padLeft,
		5,
		_elm_lang$core$Native_Utils.chr('0'),
		_elm_lang$core$Basics$toString(indent));
};
var _wintvelt$elm_print_any$PrintAny$splitWithQuotes = function (string) {
	return A2(
		_elm_lang$core$List$indexedMap,
		F2(
			function (i, str) {
				return _elm_lang$core$Native_Utils.eq(
					A2(_elm_lang$core$Basics$rem, i, 2),
					1) ? A2(
					_elm_lang$core$Basics_ops['++'],
					'\"',
					A2(_elm_lang$core$Basics_ops['++'], str, '\"')) : str;
			}),
		A2(_elm_lang$core$String$split, '\"', string));
};
var _wintvelt$elm_print_any$PrintAny$splitWithChar = F2(
	function (splitter, string) {
		return A2(
			_elm_lang$core$List$indexedMap,
			F2(
				function (ind, str) {
					return (_elm_lang$core$Native_Utils.cmp(ind, 0) > 0) ? A2(_elm_lang$core$Basics_ops['++'], splitter, str) : str;
				}),
			A2(_elm_lang$core$String$split, splitter, string));
	});
var _wintvelt$elm_print_any$PrintAny$splitWithChars = F2(
	function (splitters, string) {
		var _p0 = A2(_elm_lang$core$String$left, 1, splitters);
		if (_p0 === '') {
			return _elm_lang$core$Native_List.fromArray(
				[string]);
		} else {
			return A2(
				_elm_lang$core$List$filter,
				function (s) {
					return !_elm_lang$core$Native_Utils.eq(s, '');
				},
				_elm_lang$core$List$concat(
					A2(
						_elm_lang$core$List$map,
						_wintvelt$elm_print_any$PrintAny$splitWithChars(
							A2(_elm_lang$core$String$dropLeft, 1, splitters)),
						A2(_wintvelt$elm_print_any$PrintAny$splitWithChar, _p0, string))));
		}
	});
var _wintvelt$elm_print_any$PrintAny$px = function ($int) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		_elm_lang$core$Basics$toString($int),
		'px');
};
var _wintvelt$elm_print_any$PrintAny$logLine = function (_p1) {
	var _p2 = _p1;
	var logIndent = A3(
		_elm_lang$core$String$padLeft,
		_p2._0,
		_elm_lang$core$Native_Utils.chr(' '),
		'');
	var _p3 = A2(
		_elm_lang$core$Debug$log,
		'',
		A2(_elm_lang$core$Basics_ops['++'], logIndent, _p2._1));
	return {ctor: '_Tuple0'};
};
var _wintvelt$elm_print_any$PrintAny$viewLine = F2(
	function (_p5, _p4) {
		var _p6 = _p5;
		var _p7 = _p4;
		return A2(
			_elm_lang$html$Html$p,
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html_Attributes$style(
					_elm_lang$core$Native_List.fromArray(
						[
							{
							ctor: '_Tuple2',
							_0: 'paddingLeft',
							_1: _wintvelt$elm_print_any$PrintAny$px(_p7._0 * _p6._0.increment)
						},
							{ctor: '_Tuple2', _0: 'marginTop', _1: '0px'},
							{ctor: '_Tuple2', _0: 'marginBottom', _1: '0px'}
						]))
				]),
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html$text(_p7._1)
				]));
	});
var _wintvelt$elm_print_any$PrintAny$constants = {quote: '\"', indentChars: '[{(', outdentChars: '}])', newLineChars: ','};
var _wintvelt$elm_print_any$PrintAny$addIndent = F2(
	function (string, startList) {
		var _p8 = _elm_lang$core$List$reverse(startList);
		if (_p8.ctor === '::') {
			var _p10 = _p8._0.indentAfter;
			var firstChar = A2(_elm_lang$core$String$left, 1, string);
			var _p9 = A2(_elm_lang$core$String$contains, firstChar, _wintvelt$elm_print_any$PrintAny$constants.indentChars) ? {ctor: '_Tuple2', _0: _p10 + 1, _1: _p10 + 1} : (A2(_elm_lang$core$String$contains, firstChar, _wintvelt$elm_print_any$PrintAny$constants.outdentChars) ? {ctor: '_Tuple2', _0: _p10, _1: _p10 - 1} : {ctor: '_Tuple2', _0: _p10, _1: _p10});
			var newIndentBefore = _p9._0;
			var newIndentAfter = _p9._1;
			return A2(
				_elm_lang$core$Basics_ops['++'],
				startList,
				_elm_lang$core$Native_List.fromArray(
					[
						{indentBefore: newIndentBefore, string: string, indentAfter: newIndentAfter}
					]));
		} else {
			return _elm_lang$core$Native_List.fromArray(
				[
					{indentBefore: 0, string: string, indentAfter: 0}
				]);
		}
	});
var _wintvelt$elm_print_any$PrintAny$addIndents = function (stringList) {
	return A2(
		_elm_lang$core$List$map,
		function (r) {
			return {ctor: '_Tuple2', _0: r.indentBefore, _1: r.string};
		},
		A3(
			_elm_lang$core$List$foldl,
			_wintvelt$elm_print_any$PrintAny$addIndent,
			_elm_lang$core$Native_List.fromArray(
				[]),
			stringList));
};
var _wintvelt$elm_print_any$PrintAny$splitUnquotedWithChars = function (stringList) {
	var splitString = function (string) {
		return _elm_lang$core$Native_Utils.eq(
			A2(_elm_lang$core$String$left, 1, string),
			_wintvelt$elm_print_any$PrintAny$constants.quote) ? _elm_lang$core$Native_List.fromArray(
			[string]) : A2(
			_wintvelt$elm_print_any$PrintAny$splitWithChars,
			A2(
				_elm_lang$core$Basics_ops['++'],
				_wintvelt$elm_print_any$PrintAny$constants.indentChars,
				A2(_elm_lang$core$Basics_ops['++'], _wintvelt$elm_print_any$PrintAny$constants.newLineChars, _wintvelt$elm_print_any$PrintAny$constants.outdentChars)),
			string);
	};
	return A2(_elm_lang$core$List$map, splitString, stringList);
};
var _wintvelt$elm_print_any$PrintAny$mergeOneQuote = F2(
	function (string, startList) {
		if (_elm_lang$core$Native_Utils.eq(
			A2(_elm_lang$core$String$left, 1, string),
			_wintvelt$elm_print_any$PrintAny$constants.quote)) {
			var _p11 = _elm_lang$core$List$reverse(startList);
			if (_p11.ctor === '::') {
				return _elm_lang$core$List$reverse(
					A2(
						_elm_lang$core$List_ops['::'],
						A2(_elm_lang$core$Basics_ops['++'], _p11._0, string),
						_p11._1));
			} else {
				return _elm_lang$core$Native_List.fromArray(
					[string]);
			}
		} else {
			return A2(
				_elm_lang$core$Basics_ops['++'],
				startList,
				_elm_lang$core$Native_List.fromArray(
					[string]));
		}
	});
var _wintvelt$elm_print_any$PrintAny$mergeQuoted = A2(
	_elm_lang$core$List$foldl,
	_wintvelt$elm_print_any$PrintAny$mergeOneQuote,
	_elm_lang$core$Native_List.fromArray(
		[]));
var _wintvelt$elm_print_any$PrintAny$log = function (record) {
	var lines = _elm_lang$core$List$reverse(
		_wintvelt$elm_print_any$PrintAny$addIndents(
			_wintvelt$elm_print_any$PrintAny$mergeQuoted(
				_elm_lang$core$List$concat(
					_wintvelt$elm_print_any$PrintAny$splitUnquotedWithChars(
						_wintvelt$elm_print_any$PrintAny$splitWithQuotes(
							_elm_lang$core$Basics$toString(record)))))));
	var _p12 = A2(_elm_lang$core$List$map, _wintvelt$elm_print_any$PrintAny$logLine, lines);
	return record;
};
var _wintvelt$elm_print_any$PrintAny$Constants = F4(
	function (a, b, c, d) {
		return {quote: a, indentChars: b, outdentChars: c, newLineChars: d};
	});
var _wintvelt$elm_print_any$PrintAny$IndentedString = F3(
	function (a, b, c) {
		return {indentBefore: a, string: b, indentAfter: c};
	});
var _wintvelt$elm_print_any$PrintAny$Config = function (a) {
	return {ctor: 'Config', _0: a};
};
var _wintvelt$elm_print_any$PrintAny$config = F2(
	function (increment, className) {
		return _wintvelt$elm_print_any$PrintAny$Config(
			{increment: increment, className: className});
	});
var _wintvelt$elm_print_any$PrintAny$defaultConfig = _wintvelt$elm_print_any$PrintAny$Config(
	{increment: 20, className: ''});
var _wintvelt$elm_print_any$PrintAny$viewWithConfig = F2(
	function (_p13, record) {
		var _p14 = _p13;
		var _p15 = _p14._0;
		var lines = _wintvelt$elm_print_any$PrintAny$addIndents(
			_wintvelt$elm_print_any$PrintAny$mergeQuoted(
				_elm_lang$core$List$concat(
					_wintvelt$elm_print_any$PrintAny$splitUnquotedWithChars(
						_wintvelt$elm_print_any$PrintAny$splitWithQuotes(
							_elm_lang$core$Basics$toString(record))))));
		return A2(
			_elm_lang$html$Html$pre,
			_elm_lang$core$Native_Utils.eq(_p15.className, '') ? _elm_lang$core$Native_List.fromArray(
				[]) : _elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html_Attributes$class(_p15.className)
				]),
			A2(
				_elm_lang$core$List$map,
				_wintvelt$elm_print_any$PrintAny$viewLine(
					_wintvelt$elm_print_any$PrintAny$Config(_p15)),
				lines));
	});
var _wintvelt$elm_print_any$PrintAny$view = function (record) {
	return A2(_wintvelt$elm_print_any$PrintAny$viewWithConfig, _wintvelt$elm_print_any$PrintAny$defaultConfig, record);
};
